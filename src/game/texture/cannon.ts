import { GameScene } from "../scene/game.js";

export function createCannonTexture(
  gameScene: GameScene,
  key: string,
  color: number,
  width: number, // cannon is laid horizontally
  height: number,
) {
  // 1. Create temporary Graphics object
  const graphics = gameScene.make.graphics({}, false);
  graphics.fillStyle(color, 1);

  // 2. Define dimensions based on textureSize
  const radius = height / 2;
  const circleCenterX = radius;
  const circleCenterY = radius;

  // Calculate rectangle position relative to the circle center
  const rectX = circleCenterX;
  const rectY = circleCenterY - radius;
  const rectWidth = width - radius;
  const rectHeight = height;

  // 3. Define the points of the combined shape polygon
  const points: Phaser.Math.Vector2[] = [];

  // --- Start with rectangle corners (excluding the left edge) ---
  // Top-right corner
  points.push(new Phaser.Math.Vector2(rectX + rectWidth, rectY));
  // Bottom-right corner
  points.push(new Phaser.Math.Vector2(rectX + rectWidth, rectY + rectHeight));

  // --- Add points along the semicircle arc ---
  // Go from bottom tangent point counter-clockwise to top tangent point
  const arcPointsCount = 10; // Number of segments on the arc
  const startAngle = Phaser.Math.DegToRad(90); // Bottom (Y increases down)
  // Total angle sweep is 180 degrees counter-clockwise (PI radians)
  const angleStep = Math.PI / arcPointsCount;

  for (let index = 0; index <= arcPointsCount; index++) {
    // Calculate the angle for this point on the arc
    // Start at 90 deg and add steps counter-clockwise
    const currentAngle = startAngle + index * angleStep;

    const px = circleCenterX + radius * Math.cos(currentAngle);
    const py = circleCenterY + radius * Math.sin(currentAngle);
    points.push(new Phaser.Math.Vector2(px, py));
  }

  // The loop automatically includes the start (bottom) and end (top) tangent points.
  // The final point generated by the loop (i=arcPointsCount) should be the top-left
  // corner of the rectangle / top tangent of the circle.

  graphics.fillPoints(points, true); // 'true' closes the polygon automatically
  graphics.generateTexture(key, width, height);
  graphics.destroy();
}
